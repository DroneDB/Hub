!function(){const t={IDLE:Symbol(),ROTATE:Symbol(),PAN:Symbol(),SCALE:Symbol(),FOV:Symbol(),FOCUS:Symbol(),ZROTATE:Symbol(),TOUCH_MULTI:Symbol(),ANIMATION_FOCUS:Symbol(),ANIMATION_ROTATE:Symbol()},i={NONE:Symbol(),ONE_FINGER:Symbol(),ONE_FINGER_SWITCHED:Symbol(),TWO_FINGER:Symbol(),MULT_FINGER:Symbol(),CURSOR:Symbol()},s={x:0,y:0},e={camera:new THREE.Matrix4,gizmos:new THREE.Matrix4},a={type:"change"},o={type:"start"},h={type:"end"},r=new THREE.Raycaster,n=new THREE.Vector3,c=new THREE.Matrix4,m=new THREE.Matrix4,_=new THREE.Vector3;THREE.ArcballControls=class extends THREE.EventDispatcher{constructor(r,l,u=null){super(),this.onWindowResize=(()=>{const t=(this._gizmos.scale.x+this._gizmos.scale.y+this._gizmos.scale.z)/3;this._tbRadius=this.calculateTbRadius(this.camera);const i=this._tbRadius/t,s=new THREE.EllipseCurve(0,0,i,i).getPoints(this._curvePts),e=(new THREE.BufferGeometry).setFromPoints(s);for(const t in this._gizmos.children)this._gizmos.children[t].geometry=e;this.dispatchEvent(a)}),this.onContextMenu=(t=>{if(this.enabled)for(let i=0;i<this.mouseActions.length;i++)if(2==this.mouseActions[i].mouse){t.preventDefault();break}}),this.onPointerCancel=(()=>{this._touchStart.splice(0,this._touchStart.length),this._touchCurrent.splice(0,this._touchCurrent.length),this._input=i.NONE}),this.onPointerDown=(t=>{if(0==t.button&&t.isPrimary?(this._downValid=!0,this._downEvents.push(t),this._downStart=performance.now()):this._downValid=!1,"touch"==t.pointerType&&this._input!=i.CURSOR)switch(this._touchStart.push(t),this._touchCurrent.push(t),this._input){case i.NONE:this._input=i.ONE_FINGER,this.onSinglePanStart(t,"ROTATE"),window.addEventListener("pointermove",this.onPointerMove),window.addEventListener("pointerup",this.onPointerUp);break;case i.ONE_FINGER:case i.ONE_FINGER_SWITCHED:this._input=i.TWO_FINGER,this.onRotateStart(),this.onPinchStart(),this.onDoublePanStart();break;case i.TWO_FINGER:this._input=i.MULT_FINGER,this.onTriplePanStart(t)}else if("touch"!=t.pointerType&&this._input==i.NONE){let s=null;t.ctrlKey||t.metaKey?s="CTRL":t.shiftKey&&(s="SHIFT"),this._mouseOp=this.getOpFromAction(t.button,s),null!=this._mouseOp&&(window.addEventListener("pointermove",this.onPointerMove),window.addEventListener("pointerup",this.onPointerUp),this._input=i.CURSOR,this._button=t.button,this.onSinglePanStart(t,this._mouseOp))}}),this.onPointerMove=(s=>{if("touch"==s.pointerType&&this._input!=i.CURSOR)switch(this._input){case i.ONE_FINGER:this.updateTouchEvent(s),this.onSinglePanMove(s,t.ROTATE);break;case i.ONE_FINGER_SWITCHED:if(this.calculatePointersDistance(this._touchCurrent[0],s)*this._devPxRatio>=this._switchSensibility){this._input=i.ONE_FINGER,this.updateTouchEvent(s),this.onSinglePanStart(s,"ROTATE");break}break;case i.TWO_FINGER:this.updateTouchEvent(s),this.onRotateMove(),this.onPinchMove(),this.onDoublePanMove();break;case i.MULT_FINGER:this.updateTouchEvent(s),this.onTriplePanMove(s)}else if("touch"!=s.pointerType&&this._input==i.CURSOR){let t=null;s.ctrlKey||s.metaKey?t="CTRL":s.shiftKey&&(t="SHIFT");const i=this.getOpStateFromAction(this._button,t);null!=i&&this.onSinglePanMove(s,i)}this._downValid&&this.calculatePointersDistance(this._downEvents[this._downEvents.length-1],s)*this._devPxRatio>this._movementThreshold&&(this._downValid=!1)}),this.onPointerUp=(t=>{if("touch"==t.pointerType&&this._input!=i.CURSOR){const s=this._touchCurrent.length;for(let i=0;i<s;i++)if(this._touchCurrent[i].pointerId==t.pointerId){this._touchCurrent.splice(i,1),this._touchStart.splice(i,1);break}switch(this._input){case i.ONE_FINGER:case i.ONE_FINGER_SWITCHED:window.removeEventListener("pointermove",this.onPointerMove),window.removeEventListener("pointerup",this.onPointerUp),this._input=i.NONE,this.onSinglePanEnd();break;case i.TWO_FINGER:this.onDoublePanEnd(t),this.onPinchEnd(t),this.onRotateEnd(t),this._input=i.ONE_FINGER_SWITCHED;break;case i.MULT_FINGER:0==this._touchCurrent.length&&(window.removeEventListener("pointermove",this.onPointerMove),window.removeEventListener("pointerup",this.onPointerUp),this._input=i.NONE,this.onTriplePanEnd())}}else"touch"!=t.pointerType&&this._input==i.CURSOR&&(window.removeEventListener("pointermove",this.onPointerMove),window.removeEventListener("pointerup",this.onPointerUp),this._input=i.NONE,this.onSinglePanEnd(),this._button=-1);if(t.isPrimary)if(this._downValid)if(t.timeStamp-this._downEvents[this._downEvents.length-1].timeStamp<=this._maxDownTime)if(0==this._nclicks)this._nclicks=1,this._clickStart=performance.now();else{const i=t.timeStamp-this._clickStart,s=this.calculatePointersDistance(this._downEvents[1],this._downEvents[0])*this._devPxRatio;i<=this._maxInterval&&s<=this._posThreshold?(this._nclicks=0,this._downEvents.splice(0,this._downEvents.length),this.onDoubleTap(t)):(this._nclicks=1,this._downEvents.shift(),this._clickStart=performance.now())}else this._downValid=!1,this._nclicks=0,this._downEvents.splice(0,this._downEvents.length);else this._nclicks=0,this._downEvents.splice(0,this._downEvents.length)}),this.onWheel=(i=>{if(this.enabled&&this.enableZoom){let s=null;i.ctrlKey||i.metaKey?s="CTRL":i.shiftKey&&(s="SHIFT");const e=this.getOpFromAction("WHEEL",s);if(null!=e){i.preventDefault(),this.dispatchEvent(o);const s=125;let r=i.deltaY/s,n=1;switch(r>0?n=1/this.scaleFactor:r<0&&(n=this.scaleFactor),e){case"ZOOM":if(this.updateTbState(t.SCALE,!0),r>0?n=1/Math.pow(this.scaleFactor,r):r<0&&(n=Math.pow(this.scaleFactor,-r)),this.cursorZoom&&this.enablePan){let t;this.camera.isOrthographicCamera?t=this.unprojectOnTbPlane(this.camera,i.clientX,i.clientY,this.domElement).applyQuaternion(this.camera.quaternion).multiplyScalar(1/this.camera.zoom).add(this._gizmos.position):this.camera.isPerspectiveCamera&&(t=this.unprojectOnTbPlane(this.camera,i.clientX,i.clientY,this.domElement).applyQuaternion(this.camera.quaternion).add(this._gizmos.position)),this.applyTransformMatrix(this.scale(n,t))}else this.applyTransformMatrix(this.scale(n,this._gizmos.position));null!=this._grid&&(this.disposeGrid(),this.drawGrid()),this.updateTbState(t.IDLE,!1),this.dispatchEvent(a),this.dispatchEvent(h);break;case"FOV":if(this.camera.isPerspectiveCamera){this.updateTbState(t.FOV,!0),0!=i.deltaX&&(r=i.deltaX/s,n=1,r>0?n=1/Math.pow(this.scaleFactor,r):r<0&&(n=Math.pow(this.scaleFactor,-r))),this._v3_1.setFromMatrixPosition(this._cameraMatrixState);const e=this._v3_1.distanceTo(this._gizmos.position);let a=e/n;a=THREE.MathUtils.clamp(a,this.minDistance,this.maxDistance);const o=e*Math.tan(THREE.MathUtils.DEG2RAD*this.camera.fov*.5);let h=THREE.MathUtils.RAD2DEG*(2*Math.atan(o/a));h>this.maxFov?h=this.maxFov:h<this.minFov&&(h=this.minFov),n=e/(o/Math.tan(THREE.MathUtils.DEG2RAD*(h/2))),this.setFov(h),this.applyTransformMatrix(this.scale(n,this._gizmos.position,!1))}null!=this._grid&&(this.disposeGrid(),this.drawGrid()),this.updateTbState(t.IDLE,!1),this.dispatchEvent(a),this.dispatchEvent(h)}}}}),this.onSinglePanStart=((i,e)=>{if(this.enabled)switch(this.dispatchEvent(o),this.setCenter(i.clientX,i.clientY),e){case"PAN":if(!this.enablePan)return;-1!=this._animationId&&(cancelAnimationFrame(this._animationId),this._animationId=-1,this._timeStart=-1,this.activateGizmos(!1),this.dispatchEvent(a)),this.updateTbState(t.PAN,!0),this._startCursorPosition.copy(this.unprojectOnTbPlane(this.camera,s.x,s.y,this.domElement)),this.enableGrid&&(this.drawGrid(),this.dispatchEvent(a));break;case"ROTATE":if(!this.enableRotate)return;-1!=this._animationId&&(cancelAnimationFrame(this._animationId),this._animationId=-1,this._timeStart=-1),this.updateTbState(t.ROTATE,!0),this._startCursorPosition.copy(this.unprojectOnTbSurface(this.camera,s.x,s.y,this.domElement,this._tbRadius)),this.activateGizmos(!0),this.enableAnimations&&(this._timePrev=this._timeCurrent=performance.now(),this._angleCurrent=this._anglePrev=0,this._cursorPosPrev.copy(this._startCursorPosition),this._cursorPosCurr.copy(this._cursorPosPrev),this._wCurr=0,this._wPrev=this._wCurr),this.dispatchEvent(a);break;case"FOV":if(!this.camera.isPerspectiveCamera||!this.enableZoom)return;-1!=this._animationId&&(cancelAnimationFrame(this._animationId),this._animationId=-1,this._timeStart=-1,this.activateGizmos(!1),this.dispatchEvent(a)),this.updateTbState(t.FOV,!0),this._startCursorPosition.setY(.5*this.getCursorNDC(s.x,s.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition);break;case"ZOOM":if(!this.enableZoom)return;-1!=this._animationId&&(cancelAnimationFrame(this._animationId),this._animationId=-1,this._timeStart=-1,this.activateGizmos(!1),this.dispatchEvent(a)),this.updateTbState(t.SCALE,!0),this._startCursorPosition.setY(.5*this.getCursorNDC(s.x,s.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition)}}),this.onSinglePanMove=((i,e)=>{if(this.enabled){const r=e!=this._state;switch(this.setCenter(i.clientX,i.clientY),e){case t.PAN:this.enablePan&&(r?(this.dispatchEvent(h),this.dispatchEvent(o),this.updateTbState(e,!0),this._startCursorPosition.copy(this.unprojectOnTbPlane(this.camera,s.x,s.y,this.domElement)),this.enableGrid&&this.drawGrid(),this.activateGizmos(!1)):(this._currentCursorPosition.copy(this.unprojectOnTbPlane(this.camera,s.x,s.y,this.domElement)),this.applyTransformMatrix(this.pan(this._startCursorPosition,this._currentCursorPosition))));break;case t.ROTATE:if(this.enableRotate)if(r)this.dispatchEvent(h),this.dispatchEvent(o),this.updateTbState(e,!0),this._startCursorPosition.copy(this.unprojectOnTbSurface(this.camera,s.x,s.y,this.domElement,this._tbRadius)),this.enableGrid&&this.disposeGrid(),this.activateGizmos(!0);else{this._currentCursorPosition.copy(this.unprojectOnTbSurface(this.camera,s.x,s.y,this.domElement,this._tbRadius));const t=this._startCursorPosition.distanceTo(this._currentCursorPosition),i=this._startCursorPosition.angleTo(this._currentCursorPosition),e=Math.max(t/this._tbRadius,i);this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition,this._currentCursorPosition),e)),this.enableAnimations&&(this._timePrev=this._timeCurrent,this._timeCurrent=performance.now(),this._anglePrev=this._angleCurrent,this._angleCurrent=e,this._cursorPosPrev.copy(this._cursorPosCurr),this._cursorPosCurr.copy(this._currentCursorPosition),this._wPrev=this._wCurr,this._wCurr=this.calculateAngularSpeed(this._anglePrev,this._angleCurrent,this._timePrev,this._timeCurrent))}break;case t.SCALE:if(this.enableZoom)if(r)this.dispatchEvent(h),this.dispatchEvent(o),this.updateTbState(e,!0),this._startCursorPosition.setY(.5*this.getCursorNDC(s.x,s.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition),this.enableGrid&&this.disposeGrid(),this.activateGizmos(!1);else{const t=8;this._currentCursorPosition.setY(.5*this.getCursorNDC(s.x,s.y,this.domElement).y);const i=this._currentCursorPosition.y-this._startCursorPosition.y;let e=1;i<0?e=1/Math.pow(this.scaleFactor,-i*t):i>0&&(e=Math.pow(this.scaleFactor,i*t)),this.applyTransformMatrix(this.scale(e,this._gizmos.position))}break;case t.FOV:if(this.enableZoom&&this.camera.isPerspectiveCamera)if(r)this.dispatchEvent(h),this.dispatchEvent(o),this.updateTbState(e,!0),this._startCursorPosition.setY(.5*this.getCursorNDC(s.x,s.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition),this.enableGrid&&this.disposeGrid(),this.activateGizmos(!1);else{const t=8;this._currentCursorPosition.setY(.5*this.getCursorNDC(s.x,s.y,this.domElement).y);const i=this._currentCursorPosition.y-this._startCursorPosition.y;let e=1;i<0?e=1/Math.pow(this.scaleFactor,-i*t):i>0&&(e=Math.pow(this.scaleFactor,i*t)),this._v3_1.setFromMatrixPosition(this._cameraMatrixState);const a=this._v3_1.distanceTo(this._gizmos.position);let o=a/e;o=THREE.MathUtils.clamp(o,this.minDistance,this.maxDistance);const h=a*Math.tan(THREE.MathUtils.DEG2RAD*this._fovState*.5);let r=THREE.MathUtils.RAD2DEG*(2*Math.atan(h/o));r=THREE.MathUtils.clamp(r,this.minFov,this.maxFov);const c=h/Math.tan(THREE.MathUtils.DEG2RAD*(r/2));e=a/c,this._v3_2.setFromMatrixPosition(this._gizmoMatrixState),this.setFov(r),this.applyTransformMatrix(this.scale(e,this._v3_2,!1)),n.copy(this._gizmos.position).sub(this.camera.position).normalize().multiplyScalar(c/a),this._m4_1.makeTranslation(n.x,n.y,n.z)}}this.dispatchEvent(a)}}),this.onSinglePanEnd=(()=>{if(this._state==t.ROTATE){if(!this.enableRotate)return;if(this.enableAnimations)if(performance.now()-this._timeCurrent<120){const i=Math.abs((this._wPrev+this._wCurr)/2),s=this;this._animationId=window.requestAnimationFrame(function(e){s.updateTbState(t.ANIMATION_ROTATE,!0);const a=s.calculateRotationAxis(s._cursorPosPrev,s._cursorPosCurr);s.onRotationAnim(e,a,Math.min(i,s.wMax))})}else this.updateTbState(t.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(a);else this.updateTbState(t.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(a)}else this._state!=t.PAN&&this._state!=t.IDLE||(this.updateTbState(t.IDLE,!1),this.enableGrid&&this.disposeGrid(),this.activateGizmos(!1),this.dispatchEvent(a));this.dispatchEvent(h)}),this.onDoubleTap=(i=>{if(this.enabled&&this.enablePan&&null!=this.scene){this.dispatchEvent(o),this.setCenter(i.clientX,i.clientY);const e=this.unprojectOnObj(this.getCursorNDC(s.x,s.y,this.domElement),this.camera);if(null!=e&&this.enableAnimations){const i=this;-1!=this._animationId&&window.cancelAnimationFrame(this._animationId),this._timeStart=-1,this._animationId=window.requestAnimationFrame(function(s){i.updateTbState(t.ANIMATION_FOCUS,!0),i.onFocusAnim(s,e,i._cameraMatrixState,i._gizmoMatrixState)})}else null==e||this.enableAnimations||(this.updateTbState(t.FOCUS,!0),this.focus(e,this.scaleFactor),this.updateTbState(t.IDLE,!1),this.dispatchEvent(a))}this.dispatchEvent(h)}),this.onDoublePanStart=(()=>{this.enabled&&this.enablePan&&(this.dispatchEvent(o),this.updateTbState(t.PAN,!0),this.setCenter((this._touchCurrent[0].clientX+this._touchCurrent[1].clientX)/2,(this._touchCurrent[0].clientY+this._touchCurrent[1].clientY)/2),this._startCursorPosition.copy(this.unprojectOnTbPlane(this.camera,s.x,s.y,this.domElement,!0)),this._currentCursorPosition.copy(this._startCursorPosition),this.activateGizmos(!1))}),this.onDoublePanMove=(()=>{this.enabled&&this.enablePan&&(this.setCenter((this._touchCurrent[0].clientX+this._touchCurrent[1].clientX)/2,(this._touchCurrent[0].clientY+this._touchCurrent[1].clientY)/2),this._state!=t.PAN&&(this.updateTbState(t.PAN,!0),this._startCursorPosition.copy(this._currentCursorPosition)),this._currentCursorPosition.copy(this.unprojectOnTbPlane(this.camera,s.x,s.y,this.domElement,!0)),this.applyTransformMatrix(this.pan(this._startCursorPosition,this._currentCursorPosition,!0)),this.dispatchEvent(a))}),this.onDoublePanEnd=(()=>{this.updateTbState(t.IDLE,!1),this.dispatchEvent(h)}),this.onRotateStart=(()=>{this.enabled&&this.enableRotate&&(this.dispatchEvent(o),this.updateTbState(t.ZROTATE,!0),this._startFingerRotation=this.getAngle(this._touchCurrent[1],this._touchCurrent[0])+this.getAngle(this._touchStart[1],this._touchStart[0]),this._currentFingerRotation=this._startFingerRotation,this.camera.getWorldDirection(this._rotationAxis),this.enablePan||this.enableZoom||this.activateGizmos(!0))}),this.onRotateMove=(()=>{if(this.enabled&&this.enableRotate){let i;this.setCenter((this._touchCurrent[0].clientX+this._touchCurrent[1].clientX)/2,(this._touchCurrent[0].clientY+this._touchCurrent[1].clientY)/2),this._state!=t.ZROTATE&&(this.updateTbState(t.ZROTATE,!0),this._startFingerRotation=this._currentFingerRotation),this._currentFingerRotation=this.getAngle(this._touchCurrent[1],this._touchCurrent[0])+this.getAngle(this._touchStart[1],this._touchStart[0]),this.enablePan?(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState),i=this.unprojectOnTbPlane(this.camera,s.x,s.y,this.domElement).applyQuaternion(this.camera.quaternion).multiplyScalar(1/this.camera.zoom).add(this._v3_2)):i=(new THREE.Vector3).setFromMatrixPosition(this._gizmoMatrixState);const e=THREE.MathUtils.DEG2RAD*(this._startFingerRotation-this._currentFingerRotation);this.applyTransformMatrix(this.zRotate(i,e)),this.dispatchEvent(a)}}),this.onRotateEnd=(()=>{this.updateTbState(t.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(h)}),this.onPinchStart=(()=>{this.enabled&&this.enableZoom&&(this.dispatchEvent(o),this.updateTbState(t.SCALE,!0),this._startFingerDistance=this.calculatePointersDistance(this._touchCurrent[0],this._touchCurrent[1]),this._currentFingerDistance=this._startFingerDistance,this.activateGizmos(!1))}),this.onPinchMove=(()=>{if(this.enabled&&this.enableZoom){this.setCenter((this._touchCurrent[0].clientX+this._touchCurrent[1].clientX)/2,(this._touchCurrent[0].clientY+this._touchCurrent[1].clientY)/2);const i=12;this._state!=t.SCALE&&(this._startFingerDistance=this._currentFingerDistance,this.updateTbState(t.SCALE,!0)),this._currentFingerDistance=Math.max(this.calculatePointersDistance(this._touchCurrent[0],this._touchCurrent[1]),i*this._devPxRatio);const e=this._currentFingerDistance/this._startFingerDistance;let o;this.enablePan?this.camera.isOrthographicCamera?o=this.unprojectOnTbPlane(this.camera,s.x,s.y,this.domElement).applyQuaternion(this.camera.quaternion).multiplyScalar(1/this.camera.zoom).add(this._gizmos.position):this.camera.isPerspectiveCamera&&(o=this.unprojectOnTbPlane(this.camera,s.x,s.y,this.domElement).applyQuaternion(this.camera.quaternion).add(this._gizmos.position)):o=this._gizmos.position,this.applyTransformMatrix(this.scale(e,o)),this.dispatchEvent(a)}}),this.onPinchEnd=(()=>{this.updateTbState(t.IDLE,!1),this.dispatchEvent(h)}),this.onTriplePanStart=(()=>{if(this.enabled&&this.enableZoom){this.dispatchEvent(o),this.updateTbState(t.SCALE,!0);let i=0,e=0;const a=this._touchCurrent.length;for(let t=0;t<a;t++)i+=this._touchCurrent[t].clientX,e+=this._touchCurrent[t].clientY;this.setCenter(i/a,e/a),this._startCursorPosition.setY(.5*this.getCursorNDC(s.x,s.y,this.domElement).y),this._currentCursorPosition.copy(this._startCursorPosition)}}),this.onTriplePanMove=(()=>{if(this.enabled&&this.enableZoom){let t=0,i=0;const e=this._touchCurrent.length;for(let s=0;s<e;s++)t+=this._touchCurrent[s].clientX,i+=this._touchCurrent[s].clientY;this.setCenter(t/e,i/e);const o=8;this._currentCursorPosition.setY(.5*this.getCursorNDC(s.x,s.y,this.domElement).y);const h=this._currentCursorPosition.y-this._startCursorPosition.y;let r=1;h<0?r=1/Math.pow(this.scaleFactor,-h*o):h>0&&(r=Math.pow(this.scaleFactor,h*o)),this._v3_1.setFromMatrixPosition(this._cameraMatrixState);const c=this._v3_1.distanceTo(this._gizmos.position);let m=c/r;m=THREE.MathUtils.clamp(m,this.minDistance,this.maxDistance);const _=c*Math.tan(THREE.MathUtils.DEG2RAD*this._fovState*.5);let l=THREE.MathUtils.RAD2DEG*(2*Math.atan(_/m));l=THREE.MathUtils.clamp(l,this.minFov,this.maxFov);const u=_/Math.tan(THREE.MathUtils.DEG2RAD*(l/2));r=c/u,this._v3_2.setFromMatrixPosition(this._gizmoMatrixState),this.setFov(l),this.applyTransformMatrix(this.scale(r,this._v3_2,!1)),n.copy(this._gizmos.position).sub(this.camera.position).normalize().multiplyScalar(u/c),this._m4_1.makeTranslation(n.x,n.y,n.z),this.dispatchEvent(a)}}),this.onTriplePanEnd=(()=>{this.updateTbState(t.IDLE,!1),this.dispatchEvent(h)}),this.setCenter=((t,i)=>{s.x=t,s.y=i}),this.initializeMouseActions=(()=>{this.setMouseAction("PAN",0,"CTRL"),this.setMouseAction("PAN",2),this.setMouseAction("ROTATE",0),this.setMouseAction("ZOOM","WHEEL"),this.setMouseAction("ZOOM",1),this.setMouseAction("FOV","WHEEL","SHIFT"),this.setMouseAction("FOV",1,"SHIFT")}),this.compareMouseAction=((t,i)=>t.operation==i.operation&&t.mouse==i.mouse&&t.key==i.key),this.setMouseAction=((i,s,e=null)=>{let a;if(!["PAN","ROTATE","ZOOM","FOV"].includes(i)||![0,1,2,"WHEEL"].includes(s)||!["CTRL","SHIFT",null].includes(e))return!1;if("WHEEL"==s&&"ZOOM"!=i&&"FOV"!=i)return!1;switch(i){case"PAN":a=t.PAN;break;case"ROTATE":a=t.ROTATE;break;case"ZOOM":a=t.SCALE;break;case"FOV":a=t.FOV}const o={operation:i,mouse:s,key:e,state:a};for(let t=0;t<this.mouseActions.length;t++)if(this.mouseActions[t].mouse==o.mouse&&this.mouseActions[t].key==o.key)return this.mouseActions.splice(t,1,o),!0;return this.mouseActions.push(o),!0}),this.unsetMouseAction=((t,i=null)=>{for(let s=0;s<this.mouseActions.length;s++)if(this.mouseActions[s].mouse==t&&this.mouseActions[s].key==i)return this.mouseActions.splice(s,1),!0;return!1}),this.getOpFromAction=((t,i)=>{let s;for(let e=0;e<this.mouseActions.length;e++)if((s=this.mouseActions[e]).mouse==t&&s.key==i)return s.operation;if(null!=i)for(let i=0;i<this.mouseActions.length;i++)if((s=this.mouseActions[i]).mouse==t&&null==s.key)return s.operation;return null}),this.getOpStateFromAction=((t,i)=>{let s;for(let e=0;e<this.mouseActions.length;e++)if((s=this.mouseActions[e]).mouse==t&&s.key==i)return s.state;if(null!=i)for(let i=0;i<this.mouseActions.length;i++)if((s=this.mouseActions[i]).mouse==t&&null==s.key)return s.state;return null}),this.getAngle=((t,i)=>180*Math.atan2(i.clientY-t.clientY,i.clientX-t.clientX)/Math.PI),this.updateTouchEvent=(t=>{for(let i=0;i<this._touchCurrent.length;i++)if(this._touchCurrent[i].pointerId==t.pointerId){this._touchCurrent.splice(i,1,t);break}}),this.calculateAngularSpeed=((t,i,s,e)=>{const a=(e-s)/1e3;return 0==a?0:(i-t)/a}),this.calculatePointersDistance=((t,i)=>Math.sqrt(Math.pow(i.clientX-t.clientX,2)+Math.pow(i.clientY-t.clientY,2))),this.calculateRotationAxis=((t,i)=>(this._rotationMatrix.extractRotation(this._cameraMatrixState),this._quat.setFromRotationMatrix(this._rotationMatrix),this._rotationAxis.crossVectors(t,i).applyQuaternion(this._quat),this._rotationAxis.normalize().clone())),this.calculateTbRadius=(t=>{const i=t.position.distanceTo(this._gizmos.position);if("PerspectiveCamera"==t.type){const s=THREE.MathUtils.DEG2RAD*t.fov*.5,e=Math.atan(t.aspect*Math.tan(s));return Math.tan(Math.min(s,e))*i*this.radiusFactor}if("OrthographicCamera"==t.type)return Math.min(t.top,t.right)*this.radiusFactor}),this.focus=((t,i,s=1)=>{n.copy(t).sub(this._gizmos.position).multiplyScalar(s),this._translationMatrix.makeTranslation(n.x,n.y,n.z),c.copy(this._gizmoMatrixState),this._gizmoMatrixState.premultiply(this._translationMatrix),this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),m.copy(this._cameraMatrixState),this._cameraMatrixState.premultiply(this._translationMatrix),this._cameraMatrixState.decompose(this.camera.position,this.camera.quaternion,this.camera.scale),this.enableZoom&&this.applyTransformMatrix(this.scale(i,this._gizmos.position)),this._gizmoMatrixState.copy(c),this._cameraMatrixState.copy(m)}),this.drawGrid=(()=>{if(null!=this.scene){const t=8947848,i=3;let s,e,a,o;if(this.camera.isOrthographicCamera){const t=this.camera.right-this.camera.left,h=this.camera.bottom-this.camera.top;o=(a=Math.max(t,h))/20,e=(s=a/this.camera.zoom*i)/o*this.camera.zoom}else if(this.camera.isPerspectiveCamera){const t=this.camera.position.distanceTo(this._gizmos.position),h=THREE.MathUtils.DEG2RAD*this.camera.fov*.5,r=Math.atan(this.camera.aspect*Math.tan(h));e=(s=(a=Math.tan(Math.max(h,r))*t*2)*i)/(o=a/20)}null==this._grid&&(this._grid=new THREE.GridHelper(s,e,t,t),this._grid.position.copy(this._gizmos.position),this._gridPosition.copy(this._grid.position),this._grid.quaternion.copy(this.camera.quaternion),this._grid.rotateX(.5*Math.PI),this.scene.add(this._grid))}}),this.dispose=(()=>{-1!=this._animationId&&window.cancelAnimationFrame(this._animationId),this.domElement.removeEventListener("pointerdown",this.onPointerDown),this.domElement.removeEventListener("pointercancel",this.onPointerCancel),this.domElement.removeEventListener("wheel",this.onWheel),this.domElement.removeEventListener("contextmenu",this.onContextMenu),window.removeEventListener("pointermove",this.onPointerMove),window.removeEventListener("pointerup",this.onPointerUp),window.removeEventListener("resize",this.onWindowResize),null!==this.scene&&this.scene.remove(this._gizmos),this.disposeGrid()}),this.disposeGrid=(()=>{null!=this._grid&&null!=this.scene&&(this.scene.remove(this._grid),this._grid=null)}),this.easeOutCubic=(t=>1-Math.pow(1-t,3)),this.activateGizmos=(t=>{const i=this._gizmos.children[0],s=this._gizmos.children[1],e=this._gizmos.children[2];t?(i.material.setValues({opacity:1}),s.material.setValues({opacity:1}),e.material.setValues({opacity:1})):(i.material.setValues({opacity:.6}),s.material.setValues({opacity:.6}),e.material.setValues({opacity:.6}))}),this.getCursorNDC=((t,i,s)=>{const e=s.getBoundingClientRect();return this._v2_1.setX((t-e.left)/e.width*2-1),this._v2_1.setY((e.bottom-i)/e.height*2-1),this._v2_1.clone()}),this.getCursorPosition=((t,i,s)=>(this._v2_1.copy(this.getCursorNDC(t,i,s)),this._v2_1.x*=.5*(this.camera.right-this.camera.left),this._v2_1.y*=.5*(this.camera.top-this.camera.bottom),this._v2_1.clone())),this.setCamera=(t=>{t.lookAt(this.target),t.updateMatrix(),"PerspectiveCamera"==t.type&&(this._fov0=t.fov,this._fovState=t.fov),this._cameraMatrixState0.copy(t.matrix),this._cameraMatrixState.copy(this._cameraMatrixState0),this._cameraProjectionState.copy(t.projectionMatrix),this._zoom0=t.zoom,this._zoomState=this._zoom0,this._initialNear=t.near,this._nearPos0=t.position.distanceTo(this.target)-t.near,this._nearPos=this._initialNear,this._initialFar=t.far,this._farPos0=t.position.distanceTo(this.target)-t.far,this._farPos=this._initialFar,this._up0.copy(t.up),this._upState.copy(t.up),this.camera=t,this.camera.updateProjectionMatrix(),this._tbRadius=this.calculateTbRadius(t),this.makeGizmos(this.target,this._tbRadius)}),this.makeGizmos=((t,i)=>{const s=new THREE.EllipseCurve(0,0,i,i).getPoints(this._curvePts),e=(new THREE.BufferGeometry).setFromPoints(s),a=new THREE.LineBasicMaterial({color:16744576,fog:!1,transparent:!0,opacity:.6}),o=new THREE.LineBasicMaterial({color:8454016,fog:!1,transparent:!0,opacity:.6}),h=new THREE.LineBasicMaterial({color:8421631,fog:!1,transparent:!0,opacity:.6}),r=new THREE.Line(e,a),n=new THREE.Line(e,o),c=new THREE.Line(e,h),m=.5*Math.PI;if(r.rotation.x=m,n.rotation.y=m,this._gizmoMatrixState0.identity().setPosition(t),this._gizmoMatrixState.copy(this._gizmoMatrixState0),1!=this.camera.zoom){const i=1/this.camera.zoom;this._scaleMatrix.makeScale(i,i,i),this._translationMatrix.makeTranslation(-t.x,-t.y,-t.z),this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix),this._translationMatrix.makeTranslation(t.x,t.y,t.z),this._gizmoMatrixState.premultiply(this._translationMatrix)}this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this._gizmos.clear(),this._gizmos.add(r),this._gizmos.add(n),this._gizmos.add(c)}),this.onFocusAnim=((i,s,e,o)=>{if(-1==this._timeStart&&(this._timeStart=i),this._state==t.ANIMATION_FOCUS){const h=(i-this._timeStart)/this.focusAnimationTime;if(this._gizmoMatrixState.copy(o),h>=1)this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this.focus(s,this.scaleFactor),this._timeStart=-1,this.updateTbState(t.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(a);else{const t=this.easeOutCubic(h),i=1-t+this.scaleFactor*t;this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this.focus(s,i,t),this.dispatchEvent(a);const r=this;this._animationId=window.requestAnimationFrame(function(t){r.onFocusAnim(t,s,e,o.clone())})}}else this._animationId=-1,this._timeStart=-1}),this.onRotationAnim=((i,s,e)=>{if(-1==this._timeStart&&(this._anglePrev=0,this._angleCurrent=0,this._timeStart=i),this._state==t.ANIMATION_ROTATE){const o=(i-this._timeStart)/1e3;if(e+-this.dampingFactor*o>0){this._angleCurrent=.5*-this.dampingFactor*Math.pow(o,2)+e*o+0,this.applyTransformMatrix(this.rotate(s,this._angleCurrent)),this.dispatchEvent(a);const t=this;this._animationId=window.requestAnimationFrame(function(i){t.onRotationAnim(i,s,e)})}else this._animationId=-1,this._timeStart=-1,this.updateTbState(t.IDLE,!1),this.activateGizmos(!1),this.dispatchEvent(a)}else this._animationId=-1,this._timeStart=-1,this._state!=t.ROTATE&&(this.activateGizmos(!1),this.dispatchEvent(a))}),this.pan=((t,i,s=!1)=>{const a=t.clone().sub(i);if(this.camera.isOrthographicCamera)a.multiplyScalar(1/this.camera.zoom);else if(this.camera.isPerspectiveCamera&&s){this._v3_1.setFromMatrixPosition(this._cameraMatrixState0),this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0);const t=this._v3_1.distanceTo(this._v3_2)/this.camera.position.distanceTo(this._gizmos.position);a.multiplyScalar(1/t)}return this._v3_1.set(a.x,a.y,0).applyQuaternion(this.camera.quaternion),this._m4_1.makeTranslation(this._v3_1.x,this._v3_1.y,this._v3_1.z),this.setTransformationMatrices(this._m4_1,this._m4_1),e}),this.reset=(()=>{this.camera.zoom=this._zoom0,this.camera.isPerspectiveCamera&&(this.camera.fov=this._fov0),this.camera.near=this._nearPos,this.camera.far=this._farPos,this._cameraMatrixState.copy(this._cameraMatrixState0),this._cameraMatrixState.decompose(this.camera.position,this.camera.quaternion,this.camera.scale),this.camera.up.copy(this._up0),this.camera.updateMatrix(),this.camera.updateProjectionMatrix(),this._gizmoMatrixState.copy(this._gizmoMatrixState0),this._gizmoMatrixState0.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this._gizmos.updateMatrix(),this._tbRadius=this.calculateTbRadius(this.camera),this.makeGizmos(this._gizmos.position,this._tbRadius),this.camera.lookAt(this._gizmos.position),this.updateTbState(t.IDLE,!1),this.dispatchEvent(a)}),this.rotate=((t,i)=>{const s=this._gizmos.position;return this._translationMatrix.makeTranslation(-s.x,-s.y,-s.z),this._rotationMatrix.makeRotationAxis(t,-i),this._m4_1.makeTranslation(s.x,s.y,s.z),this._m4_1.multiply(this._rotationMatrix),this._m4_1.multiply(this._translationMatrix),this.setTransformationMatrices(this._m4_1),e}),this.copyState=(()=>{let t;this.camera.isOrthographicCamera?t=JSON.stringify({arcballState:{cameraFar:this.camera.far,cameraMatrix:this.camera.matrix,cameraNear:this.camera.near,cameraUp:this.camera.up,cameraZoom:this.camera.zoom,gizmoMatrix:this._gizmos.matrix}}):this.camera.isPerspectiveCamera&&(t=JSON.stringify({arcballState:{cameraFar:this.camera.far,cameraFov:this.camera.fov,cameraMatrix:this.camera.matrix,cameraNear:this.camera.near,cameraUp:this.camera.up,cameraZoom:this.camera.zoom,gizmoMatrix:this._gizmos.matrix}})),navigator.clipboard.writeText(t)}),this.pasteState=(()=>{const t=this;navigator.clipboard.readText().then(function(i){t.setStateFromJSON(i)})}),this.saveState=(()=>{this._cameraMatrixState0.copy(this.camera.matrix),this._gizmoMatrixState0.copy(this._gizmos.matrix),this._nearPos=this.camera.near,this._farPos=this.camera.far,this._zoom0=this.camera.zoom,this._up0.copy(this.camera.up),this.camera.isPerspectiveCamera&&(this._fov0=this.camera.fov)}),this.scale=((t,i,s=!0)=>{_.copy(i);let a=1/t;if(this.camera.isOrthographicCamera){this.camera.zoom=this._zoomState,this.camera.zoom*=t,this.camera.zoom>this.maxZoom?(this.camera.zoom=this.maxZoom,a=this._zoomState/this.maxZoom):this.camera.zoom<this.minZoom&&(this.camera.zoom=this.minZoom,a=this._zoomState/this.minZoom),this.camera.updateProjectionMatrix(),this._v3_1.setFromMatrixPosition(this._gizmoMatrixState),this._scaleMatrix.makeScale(a,a,a),this._translationMatrix.makeTranslation(-this._v3_1.x,-this._v3_1.y,-this._v3_1.z),this._m4_2.makeTranslation(this._v3_1.x,this._v3_1.y,this._v3_1.z).multiply(this._scaleMatrix),this._m4_2.multiply(this._translationMatrix),_.sub(this._v3_1);const i=_.clone().multiplyScalar(a);return _.sub(i),this._m4_1.makeTranslation(_.x,_.y,_.z),this._m4_2.premultiply(this._m4_1),this.setTransformationMatrices(this._m4_1,this._m4_2),e}if(this.camera.isPerspectiveCamera){this._v3_1.setFromMatrixPosition(this._cameraMatrixState),this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);let t=this._v3_1.distanceTo(_),i=t-t*a;const o=t-i;if(o<this.minDistance?i=t-t*(a=this.minDistance/t):o>this.maxDistance&&(i=t-t*(a=this.maxDistance/t)),n.copy(_).sub(this._v3_1).normalize().multiplyScalar(i),this._m4_1.makeTranslation(n.x,n.y,n.z),s){const s=this._v3_2;i=(t=s.distanceTo(_))-t*a,n.copy(_).sub(this._v3_2).normalize().multiplyScalar(i),this._translationMatrix.makeTranslation(s.x,s.y,s.z),this._scaleMatrix.makeScale(a,a,a),this._m4_2.makeTranslation(n.x,n.y,n.z).multiply(this._translationMatrix),this._m4_2.multiply(this._scaleMatrix),this._translationMatrix.makeTranslation(-s.x,-s.y,-s.z),this._m4_2.multiply(this._translationMatrix),this.setTransformationMatrices(this._m4_1,this._m4_2)}else this.setTransformationMatrices(this._m4_1);return e}}),this.setFov=(t=>{this.camera.isPerspectiveCamera&&(this.camera.fov=THREE.MathUtils.clamp(t,this.minFov,this.maxFov),this.camera.updateProjectionMatrix())}),this.zRotate=((t,i)=>(this._rotationMatrix.makeRotationAxis(this._rotationAxis,i),this._translationMatrix.makeTranslation(-t.x,-t.y,-t.z),this._m4_1.makeTranslation(t.x,t.y,t.z),this._m4_1.multiply(this._rotationMatrix),this._m4_1.multiply(this._translationMatrix),this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(t),this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis,i),this._v3_2.sub(this._v3_1),this._m4_2.makeTranslation(this._v3_2.x,this._v3_2.y,this._v3_2.z),this.setTransformationMatrices(this._m4_1,this._m4_2),e)),this.unprojectOnObj=((t,i)=>{const s=this.getRaycaster();s.near=i.near,s.far=i.far,s.setFromCamera(t,i);const e=s.intersectObjects(this.scene.children,!0);for(let t=0;t<e.length;t++)if(e[t].object.uuid!=this._gizmos.uuid&&null!=e[t].face)return e[t].point.clone();return null}),this.unprojectOnTbSurface=((t,i,s,e,a)=>{if("OrthographicCamera"==t.type){this._v2_1.copy(this.getCursorPosition(i,s,e)),this._v3_1.set(this._v2_1.x,this._v2_1.y,0);const t=Math.pow(this._v2_1.x,2),a=Math.pow(this._v2_1.y,2),o=Math.pow(this._tbRadius,2);return t+a<=.5*o?this._v3_1.setZ(Math.sqrt(o-(t+a))):this._v3_1.setZ(.5*o/Math.sqrt(t+a)),this._v3_1}if("PerspectiveCamera"==t.type){this._v2_1.copy(this.getCursorNDC(i,s,e)),this._v3_1.set(this._v2_1.x,this._v2_1.y,-1),this._v3_1.applyMatrix4(t.projectionMatrixInverse);const o=this._v3_1.clone().normalize(),h=t.position.distanceTo(this._gizmos.position),r=Math.pow(a,2),n=this._v3_1.z,c=Math.sqrt(Math.pow(this._v3_1.x,2)+Math.pow(this._v3_1.y,2));if(0==c)return o.set(this._v3_1.x,this._v3_1.y,a),o;const m=n/c,_=h;let l=Math.pow(m,2)+1,u=2*m*_,p=Math.pow(_,2)-r,d=Math.pow(u,2)-4*l*p;if(d>=0&&(this._v2_1.setX((-u-Math.sqrt(d))/(2*l)),this._v2_1.setY(m*this._v2_1.x+_),THREE.MathUtils.RAD2DEG*this._v2_1.angle()>=45)){const t=Math.sqrt(Math.pow(this._v2_1.x,2)+Math.pow(h-this._v2_1.y,2));return o.multiplyScalar(t),o.z+=h,o}l=m,u=_,p=.5*-r,d=Math.pow(u,2)-4*l*p,this._v2_1.setX((-u-Math.sqrt(d))/(2*l)),this._v2_1.setY(m*this._v2_1.x+_);const E=Math.sqrt(Math.pow(this._v2_1.x,2)+Math.pow(h-this._v2_1.y,2));return o.multiplyScalar(E),o.z+=h,o}}),this.unprojectOnTbPlane=((t,i,s,e,a=!1)=>{if("OrthographicCamera"==t.type)return this._v2_1.copy(this.getCursorPosition(i,s,e)),this._v3_1.set(this._v2_1.x,this._v2_1.y,0),this._v3_1.clone();if("PerspectiveCamera"==t.type){this._v2_1.copy(this.getCursorNDC(i,s,e)),this._v3_1.set(this._v2_1.x,this._v2_1.y,-1),this._v3_1.applyMatrix4(t.projectionMatrixInverse);const o=this._v3_1.clone().normalize(),h=this._v3_1.z,r=Math.sqrt(Math.pow(this._v3_1.x,2)+Math.pow(this._v3_1.y,2));let n;if(n=a?this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0)):t.position.distanceTo(this._gizmos.position),0==r)return o.set(0,0,0),o;const c=n,m=-c/(h/r),_=Math.sqrt(Math.pow(c,2)+Math.pow(m,2));return o.multiplyScalar(_),o.z=0,o}}),this.updateMatrixState=(()=>{this._cameraMatrixState.copy(this.camera.matrix),this._gizmoMatrixState.copy(this._gizmos.matrix),this.camera.isOrthographicCamera?(this._cameraProjectionState.copy(this.camera.projectionMatrix),this.camera.updateProjectionMatrix(),this._zoomState=this.camera.zoom):this.camera.isPerspectiveCamera&&(this._fovState=this.camera.fov)}),this.updateTbState=((t,i)=>{this._state=t,i&&this.updateMatrixState()}),this.update=(()=>{if(!1===this.target.equals(this._currentTarget)&&(this._gizmos.position.copy(this.target),this._tbRadius=this.calculateTbRadius(this.camera),this.makeGizmos(this.target,this._tbRadius),this._currentTarget.copy(this.target)),this.camera.isOrthographicCamera){if(this.camera.zoom>this.maxZoom||this.camera.zoom<this.minZoom){const t=THREE.MathUtils.clamp(this.camera.zoom,this.minZoom,this.maxZoom);this.applyTransformMatrix(this.scale(t/this.camera.zoom,this._gizmos.position,!0))}}else if(this.camera.isPerspectiveCamera){const t=this.camera.position.distanceTo(this._gizmos.position);if(t>this.maxDistance+1e-6||t<this.minDistance-1e-6){const i=THREE.MathUtils.clamp(t,this.minDistance,this.maxDistance);this.applyTransformMatrix(this.scale(i/t,this._gizmos.position)),this.updateMatrixState()}(this.camera.fov<this.minFov||this.camera.fov>this.maxFov)&&(this.camera.fov=THREE.MathUtils.clamp(this.camera.fov,this.minFov,this.maxFov),this.camera.updateProjectionMatrix());const i=this._tbRadius;if(this._tbRadius=this.calculateTbRadius(this.camera),i<this._tbRadius-1e-6||i>this._tbRadius+1e-6){const t=(this._gizmos.scale.x+this._gizmos.scale.y+this._gizmos.scale.z)/3,i=this._tbRadius/t,s=new THREE.EllipseCurve(0,0,i,i).getPoints(this._curvePts),e=(new THREE.BufferGeometry).setFromPoints(s);for(const t in this._gizmos.children)this._gizmos.children[t].geometry=e}}this.camera.lookAt(this._gizmos.position)}),this.setStateFromJSON=(i=>{const s=JSON.parse(i);if(null!=s.arcballState){this._cameraMatrixState.fromArray(s.arcballState.cameraMatrix.elements),this._cameraMatrixState.decompose(this.camera.position,this.camera.quaternion,this.camera.scale),this.camera.up.copy(s.arcballState.cameraUp),this.camera.near=s.arcballState.cameraNear,this.camera.far=s.arcballState.cameraFar,this.camera.zoom=s.arcballState.cameraZoom,this.camera.isPerspectiveCamera&&(this.camera.fov=s.arcballState.cameraFov),this._gizmoMatrixState.fromArray(s.arcballState.gizmoMatrix.elements),this._gizmoMatrixState.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this.camera.updateMatrix(),this.camera.updateProjectionMatrix(),this._gizmos.updateMatrix(),this._tbRadius=this.calculateTbRadius(this.camera);const i=(new THREE.Matrix4).copy(this._gizmoMatrixState0);this.makeGizmos(this._gizmos.position,this._tbRadius),this._gizmoMatrixState0.copy(i),this.camera.lookAt(this._gizmos.position),this.updateTbState(t.IDLE,!1),this.dispatchEvent(a)}}),this.camera=null,this.domElement=l,this.scene=u,this.target=new THREE.Vector3,this._currentTarget=new THREE.Vector3,this.radiusFactor=.67,this.mouseActions=[],this._mouseOp=null,this._v2_1=new THREE.Vector2,this._v3_1=new THREE.Vector3,this._v3_2=new THREE.Vector3,this._m4_1=new THREE.Matrix4,this._m4_2=new THREE.Matrix4,this._quat=new THREE.Quaternion,this._translationMatrix=new THREE.Matrix4,this._rotationMatrix=new THREE.Matrix4,this._scaleMatrix=new THREE.Matrix4,this._rotationAxis=new THREE.Vector3,this._cameraMatrixState=new THREE.Matrix4,this._cameraProjectionState=new THREE.Matrix4,this._fovState=1,this._upState=new THREE.Vector3,this._zoomState=1,this._nearPos=0,this._farPos=0,this._gizmoMatrixState=new THREE.Matrix4,this._up0=new THREE.Vector3,this._zoom0=1,this._fov0=0,this._initialNear=0,this._nearPos0=0,this._initialFar=0,this._farPos0=0,this._cameraMatrixState0=new THREE.Matrix4,this._gizmoMatrixState0=new THREE.Matrix4,this._button=-1,this._touchStart=[],this._touchCurrent=[],this._input=i.NONE,this._switchSensibility=32,this._startFingerDistance=0,this._currentFingerDistance=0,this._startFingerRotation=0,this._currentFingerRotation=0,this._devPxRatio=0,this._downValid=!0,this._nclicks=0,this._downEvents=[],this._downStart=0,this._clickStart=0,this._maxDownTime=250,this._maxInterval=300,this._posThreshold=24,this._movementThreshold=24,this._currentCursorPosition=new THREE.Vector3,this._startCursorPosition=new THREE.Vector3,this._grid=null,this._gridPosition=new THREE.Vector3,this._gizmos=new THREE.Group,this._curvePts=128,this._timeStart=-1,this._animationId=-1,this.focusAnimationTime=500,this._timePrev=0,this._timeCurrent=0,this._anglePrev=0,this._angleCurrent=0,this._cursorPosPrev=new THREE.Vector3,this._cursorPosCurr=new THREE.Vector3,this._wPrev=0,this._wCurr=0,this.adjustNearFar=!1,this.scaleFactor=1.1,this.dampingFactor=25,this.wMax=20,this.enableAnimations=!0,this.enableGrid=!1,this.cursorZoom=!1,this.minFov=5,this.maxFov=90,this.enabled=!0,this.enablePan=!0,this.enableRotate=!0,this.enableZoom=!0,this.enableGizmos=!0,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this._tbRadius=1,this._state=t.IDLE,this.setCamera(r),null!=this.scene&&this.scene.add(this._gizmos),this.domElement.style.touchAction="none",this._devPxRatio=window.devicePixelRatio,this.initializeMouseActions(),this.domElement.addEventListener("contextmenu",this.onContextMenu),this.domElement.addEventListener("wheel",this.onWheel),this.domElement.addEventListener("pointerdown",this.onPointerDown),this.domElement.addEventListener("pointercancel",this.onPointerCancel),window.addEventListener("resize",this.onWindowResize)}applyTransformMatrix(i){if(null!=i.camera&&(this._m4_1.copy(this._cameraMatrixState).premultiply(i.camera),this._m4_1.decompose(this.camera.position,this.camera.quaternion,this.camera.scale),this.camera.updateMatrix(),this._state!=t.ROTATE&&this._state!=t.ZROTATE&&this._state!=t.ANIMATION_ROTATE||this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion)),null!=i.gizmos&&(this._m4_1.copy(this._gizmoMatrixState).premultiply(i.gizmos),this._m4_1.decompose(this._gizmos.position,this._gizmos.quaternion,this._gizmos.scale),this._gizmos.updateMatrix()),this._state==t.SCALE||this._state==t.FOCUS||this._state==t.ANIMATION_FOCUS)if(this._tbRadius=this.calculateTbRadius(this.camera),this.adjustNearFar){const t=this.camera.position.distanceTo(this._gizmos.position),i=new THREE.Box3;i.setFromObject(this._gizmos);const s=new THREE.Sphere;i.getBoundingSphere(s);const e=Math.max(this._nearPos0,s.radius+s.center.length()),a=t-this._initialNear,o=Math.min(e,a);this.camera.near=t-o;const h=Math.min(this._farPos0,-s.radius+s.center.length()),r=t-this._initialFar,n=Math.min(h,r);this.camera.far=t-n,this.camera.updateProjectionMatrix()}else{let t=!1;this.camera.near!=this._initialNear&&(this.camera.near=this._initialNear,t=!0),this.camera.far!=this._initialFar&&(this.camera.far=this._initialFar,t=!0),t&&this.camera.updateProjectionMatrix()}}setGizmosVisible(t){this._gizmos.visible=t,this.dispatchEvent(a)}setTbRadius(t){this.radiusFactor=t,this._tbRadius=this.calculateTbRadius(this.camera);const i=new THREE.EllipseCurve(0,0,this._tbRadius,this._tbRadius).getPoints(this._curvePts),s=(new THREE.BufferGeometry).setFromPoints(i);for(const t in this._gizmos.children)this._gizmos.children[t].geometry=s;this.dispatchEvent(a)}setTransformationMatrices(t=null,i=null){null!=t?null!=e.camera?e.camera.copy(t):e.camera=t.clone():e.camera=null,null!=i?null!=e.gizmos?e.gizmos.copy(i):e.gizmos=i.clone():e.gizmos=null}getRaycaster(){return r}}}();